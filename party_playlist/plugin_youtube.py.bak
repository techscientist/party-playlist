# -*- coding: utf-8 -*-

from __future__ import unicode_literals
import re
import string
from multiprocessing.pool import ThreadPool
try:
	from urlparse import urlparse, parse_qs
except:
	from urllib.parse import urlparse, parse_qs
import unicodedata

import pafy

#~ from mopidy import backend
#~ from mopidy.models import SearchResult, Track, Album
#~ import pykka
import requests
import logging
#~ from mopidy_youtube import logging


yt_api_endpoint = 'https://www.googleapis.com/youtube/v3/'
yt_key = 'AIzaSyAl1Xq9DwdE_KD4AtPaE4EJl3WZe2zCqg4'
session = requests.Session()


def resolve_track(track, stream=False):
	logging.debug("Resolving Youtube for track '%s'", track)
	if hasattr(track, 'uri'):
		return resolve_url(track.comment, stream)
	else:
		return resolve_url(track.split('.')[-1], stream)


def safe_url(uri):
	valid_chars = "-_.() %s%s" % (string.ascii_letters, string.digits)
	safe_uri = unicodedata.normalize(
		'NFKD',
		unicode(uri)
	).encode('ASCII', 'ignore')
	return re.sub(
		'\s+',
		' ',
		''.join(c for c in safe_uri if c in valid_chars)
	).strip()


def resolve_url(url, stream=False):
	try:
		video = pafy.new(url)
		if not stream:
			uri = 'youtube:video/%s.%s' % (
				safe_url(video.title), video.videoid
			)
		else:
			uri = video.getbestaudio()
			if not uri:  # get video url
				uri = video.getbest()
			logging.debug('%s - %s %s %s' % (
				video.title, uri.bitrate, uri.mediatype, uri.extension))
			uri = uri.url
		if not uri:
			return
	except Exception as e:
		# Video is private or doesn't exist
		logging.info(e.message)
		return

	return uri


def search_youtube(q):
	query = {
		'part': 'id',
		'maxResults': 15,
		'type': 'video',
		'videoCategoryId':'music',
		'q': q,
		'key': yt_key
	}
	result = session.get(yt_api_endpoint+'search', params=query)
	data = result.json()

	resolve_pool = ThreadPool(processes=16)
	playlist = [item['id']['videoId'] for item in data['items']]

	playlist = resolve_pool.map(resolve_url, playlist)
	resolve_pool.close()
	return [item for item in playlist if item]


def resolve_playlist(url):
	resolve_pool = ThreadPool(processes=16)
	logging.info("Resolving Youtube-Playlist '%s'", url)
	playlist = []

	page = 'first'
	while page:
		params = {
			'playlistId': url,
			'maxResults': 50,
			'key': yt_key,
			'part': 'contentDetails'
		}
		if page and page != "first":
			logging.debug("Get Youtube-Playlist '%s' page %s", url, page)
			params['pageToken'] = page

		result = session.get(yt_api_endpoint+'playlistItems', params=params)
		data = result.json()
		page = data.get('nextPageToken')

		for item in data["items"]:
			video_id = item['contentDetails']['videoId']
			playlist.append(video_id)

	playlist = resolve_pool.map(resolve_url, playlist)
	resolve_pool.close()
	return [item for item in playlist if item]

if __name__ == '__main__':
	logging.basicConfig(filename= 'logging.log',
								filemode='w',
								level=logging.DEBUG,
								format='%(asctime)s:%(levelname)s: %(message)s')	# one run
	#~ logging.debug(os.name)
	print(search_youtube('disturbed'))
